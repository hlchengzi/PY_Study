'''
斐波那契数列
'''
import sys
# '''
# 修改最大的递归深度
# '''
sys.setrecursionlimit(1000000) #例如这里设置为一百万



def solutionFibonacci1(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        result = [0, 1]
        for i in range(2, n + 1):
            result.append(result[i - 1] + result[i - 2])
        return result[n]

# 使用递归的方法解决 斐波那契数列
def solutionFibonacci2(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solutionFibonacci2(n - 1) + solutionFibonacci2(n - 2)

import time;  # 引入time模块

ticks = time.time()
if __name__ == '__main__':
    time1 = time.time()
    result1 = solutionFibonacci1(10000)
    time2 = time.time()
    print(time2-time1)
    result2 = solutionFibonacci2(30)
    time3 = time.time()
    print(time3 - time2)
    print(str(result1)+"::"+str(result2))
'''
0.007979869842529297
0.4278876781463623

可以看到使用动态规划，不用频繁的去调用递归，计算效率更高，更快
'''